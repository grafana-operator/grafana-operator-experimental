name: KinD End-to-End

on:
  pull_request:
    branches: [master]

env:
  NAME: grafana-operator
  NAMESPACE: grafana-operator-system

jobs:
  docs_only_check:
    name: Check for docs-only change
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      docs_only: ${{ steps.docs_only_check.outputs.docs_only }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3.3.0
      - id: files
        name: Get changed files
        uses: tj-actions/changed-files@0626c3f94002c0a9d7491dd7fed7055bbdff6f92 #v35.1.0
        with:
          files_ignore: |
            **.md
            **.html
            hugo/**
      - id: docs_only_check
        if: steps.files.outputs.any_changed != 'true'
        name: Check for docs-only changes
        run: echo "docs_only=true" >> $GITHUB_OUTPUT

  end-to-end:
    runs-on: ubuntu-latest
    needs:
      - docs_only_check
    if: (needs.docs_only_check.outputs.docs_only != 'true')
    steps:
      - name: Clone repo and checkout submodules
        uses: actions/checkout@v3.3.0
        with:
          submodules: recursive

      - uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
          cache: true

      - uses: ko-build/setup-ko@v0.6
        with:
          version: v0.13.0

      - name: Set up KinD
        id: kind
        run: |
          kind create cluster --image=kindest/node:v1.25.3 --config tests/e2e/kind.yaml

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.4.1

      - name: Build and load (current arch)
        env:
          KO_DOCKER_REPO: ko.local/grafana-operator/grafana-operator
        run: |
          ko build --sbom=none --bare
          kind load docker-image "$KO_DOCKER_REPO"

      - name: Run e2e
        shell: bash
        run: |
          # install kuttl
          make kuttl
          # Run e2e
          VERSION=latest make e2e

      - name: Debug failure
        if: failure()
        run: |
          kubectl version
          kubectl -n $NAMESPACE get all
          kubectl -n $NAMESPACE get grafana
          kubectl get crd
          POD=$(kubectl get pods -n $NAMESPACE -l control-plane=controller-manager --output=jsonpath={.items..metadata.name})
          kubectl logs -n $NAMESPACE $POD -c manager
